name: Compile Sketch

on:
  push:
    branches: [dev, release/stm32-blackpill]
  pull_request:
    branches: [dev, release/stm32-blackpill]
  # Manual trigger
  workflow_dispatch:

jobs:
  formatting-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - "src"
          - "lib"
          - "scales-calibration"
          - "test"
          - "test-lib"
          - "uart-esp"
          - "uart-stm"
          - "webserver"
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format style check for C/C++/Protobuf programs.
        uses: jidicula/clang-format-action@v4.10.2
        with:
          clang-format-version: "13"
          check-path: ${{ matrix.path }}
          fallback-style: "Google"
  coding-style:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install eclint
        run: |
          npm install -g eclint

      - name: Check coding style
        run: |
          eclint check $(sh .eclint-files.sh)

  compile-sketch:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1

      - name: Install Platformio
        run: |
          python3 -c "$(curl -fsSL https://raw.githubusercontent.com/platformio/platformio/master/scripts/get-platformio.py)"

      - name: Build the main project
        run: |
          ~/.platformio/penv/bin/platformio run -e gaggia-lego-stlink

      - name: Build scales
        run: |
          ~/.platformio/penv/bin/platformio run -e scales-calibration-dfu

      - name: Run tests
        run: |
          ~/.platformio/penv/bin/platformio test -e test

  static-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1

      - name: Install Platformio
        run: |
          python3 -c "$(curl -fsSL https://raw.githubusercontent.com/platformio/platformio/master/scripts/get-platformio.py)"

      - name: Run static analysis on main project
        if: success() || failure()
        run: |
          ~/.platformio/penv/bin/platformio check -e gaggia-lego-stlink --fail-on-defect medium --fail-on-defect high

      - name: Run static analysis on scales
        if: success() || failure()
        run: |
          ~/.platformio/penv/bin/platformio check -e scales-calibration-dfu --fail-on-defect medium --fail-on-defect high

      - name: Run static analysis on uart-stm
        if: success() || failure()
        run: |
          ~/.platformio/penv/bin/platformio check -e uart-stm --fail-on-defect medium --fail-on-defect high

      - name: Run static analysis on uart-esp
        if: success() || failure()
        run: |
          ~/.platformio/penv/bin/platformio check -e uart-esp --fail-on-defect medium --fail-on-defect high
  static-analysis2:
    name: Static Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment:
          - "gaggia-lego-stlink"
          - "scales-calibration-dfu"
          - "uart-stm"
          - "uart-esp"
      steps:
        - uses: actions/checkout@v3
        - name: Install Platformio
          run: |
            python3 -c "$(curl -fsSL https://raw.githubusercontent.com/platformio/platformio/master/scripts/get-platformio.py)"
        - name: Run static analysis on ${{ matrix.environment }}
          run: |
            ~/.platformio/penv/bin/platformio check -e ${{ matrix.environment }} --fail-on-defect medium --fail-on-defect high
